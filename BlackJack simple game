# Mini-project #6 - Blackjack

import simplegui
import random

# load card sprite - 949x392 - source: jfitz.com
CARD_SIZE = (73, 98)
CARD_CENTER = (36.5, 49)
card_images = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/cards.jfitz.png")

CARD_BACK_SIZE = (71, 96)
CARD_BACK_CENTER = (35.5, 48)
card_back = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/card_back.png")    

# initialize some useful global variables
in_play = False
outcome = ""
score = 0
snapped = []
gmabler = []
dealer = []
deck = []

# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}


# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos):
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
        
# define hand class
class Hand:
    def __init__(self):
        self.hand_of_player = []

    def __str__(self):
        st = ''
        for i in self.hand_of_player:
            st = st + str(i) + ' '
        return st    

    def add_card(self, card):
        self.hand_of_player.append(card)
        return self.hand_of_player

    def get_value(self):
        # count aces as 1, if the hand has an ace, then add 10 to hand value if it doesn't bust
        value = 0
        for card in self.hand_of_player:
            rank = card.get_rank()
            value = value + VALUES[rank]
        
        for card in self.hand_of_player:
            rank = card.get_rank()
            if rank == 'A' and value <= 11:
                value += 10
        return value        
   
    def draw(self, canvas, pos):
        # draw a hand on the canvas, use the draw method for cards
        for card in self.hand_of_player:
            card.draw(canvas, pos)
            pos[0] = pos[0] + 90
        if in_play == True:
            canvas.draw_image(card_back, CARD_BACK_CENTER,
                              CARD_BACK_SIZE, [115, 184],
                              CARD_BACK_SIZE)
 
        
# define deck class 
class Deck:
    def __init__(self):
         
        snapped = []
        self.cards = [Card(suit, rank) for suit in SUITS for rank in RANKS]
        self.shuffle()

    def shuffle(self):
        # shuffle the deck 
        random.shuffle(self.cards)
 
    def deal_card(self):
        # deal a card object from the deck
        snapped = self.cards.pop(0)
        return snapped
    
    def __str__(self):
        # return a string representing the deck
        st = ''
        for i in self.cards:
            st = st + str(i) + ' '
        return st    



#define event handlers for buttons
def deal():
    global outcome, in_play, gambler, message, score, deck, dealer

    if in_play == True:
        message = "New Hand"
        score -= 1
        dealer = Hand()
        gambler = Hand()
        deck = Deck()
        gambler.add_card(deck.deal_card())
        dealer.add_card(deck.deal_card())
        gambler.add_card(deck.deal_card())
        dealer.add_card(deck.deal_card())        
        

    
    if in_play == False:
        deck = Deck()
        gambler = Hand()
        dealer = Hand()
        gambler.add_card(deck.deal_card())
        dealer.add_card(deck.deal_card())
        gambler.add_card(deck.deal_card())
        dealer.add_card(deck.deal_card())
        message = "New . Stand OR Hit ?"    
    in_play = True
    outcome = ''

def hit():
    # replace with your code below
    # if the hand is in play, hit the player
    global in_play, message, score
    if in_play == True:
        gambler.add_card(deck.deal_card())
        message = "You could Stand or Hit ?"
   
    # if busted, assign a message to outcome, update in_play and score
    if gambler.get_value() > 21:
        in_play = False
        message = " Busted ! Game Lost ! Deal again? "
        score -= 1
        outcome = "Player:  " + str(gambler.get_value()) + "  Dealer: " + str(dealer.get_value())
        
                    
        
        
    
    
def stand():
    # replace with your code below
    # if hand is in play, repeatedly hit dealer until his hand has value 17 or more
    global in_play, score, message, outcome
    if in_play == False:
        message = " Hand is done. deal again"
     
    else:
        while dealer.get_value() < 17:
            dealer.add_card(deck.deal_card())
        if dealer.get_value() > 21:
            message = "You Win ! Dealer Busted"
            score += 1
            in_play = False
            
        elif gambler.get_value() > dealer.get_value():
            message = "You Win ! Play Again ?"
            score += 1
            in_play = False
        
        elif gambler.get_value() < dealer.get_value():
            message = "You Lost ! Play Again?"
            score -= 1
            in_play = False
        
        elif gambler.get_value() == dealer.get_value():
            message = "Dealer Won ! You Lost ! Play Again ?"
            score -= 1
            in_play = False
        
    # assign a message to outcome, update in_play and score
        
        outcome = "Player: " + str(gambler.get_value()) +  "  Dealer: " + str(dealer.get_value())
        

# draw handler    
def draw(canvas):
    # test to make sure that card.draw works, replace with your code below
    canvas.draw_text("Score:" + str(score), [82, 520], 38, "Red")
    canvas.draw_text(message, [200,480], 26, "Black")
    canvas.draw_text("Dealer :", [80,110], 30, "Black")
    canvas.draw_text("Player :", [80,300], 30, "Black")    
    canvas.draw_text(outcome, [80,560], 28, "Black")    

    canvas.draw_text("Blackjack", [270,50], 48, "Black")
    
    dealer.draw(canvas, [80,135])
    gambler.draw(canvas, [80,325])    
    
    #card = Card("S", "A")
    #card.draw(canvas, [300, 300])


# initialization frame
frame = simplegui.create_frame("Blackjack", 800, 800)
frame.set_canvas_background("Green")

#create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.set_draw_handler(draw)


# get things rolling
deal()
frame.start()


